/**
 * Copyright (c) 2017 chrimata
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.chrimata.code;

import java.util.Observable;
import java.util.Observer;

/**
 * Watches for {@link LogEvent}s generated by the {@link AppLog} and prints them
 * to the console.
 * 
 * @author chrimata
 *
 */
public class ConsoleLogger implements Observer
{
	/**
	 * Flag which controls whether the normal log messages will be printed
	 */
	protected boolean	normalOn	= true;
	
	/**
	 * Flag which controls whether the error log messages will be printed
	 */
	protected boolean	errorOn		= true;
	
	/**
	 * Flag which controls whether the debug log messages will be printed
	 */
	protected boolean	debugOn		= true;
	
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
	 */
	@Override
	public void update(Observable o, Object arg)
	{
		if (arg instanceof LogEvent)
		{
			LogEvent evt = (LogEvent) arg;
			
			switch (evt.getLevel())
			{
				case DEBUG:
					
					if (debugOn)
					{
						System.out.println("DEBUG: " + evt.getMessage());
					}
					
					break;
				case ERROR:
					
					if (errorOn)
					{
						System.err.println(evt.getMessage());
					}
					
					break;
				case NORMAL:
					
					if (normalOn)
					{
						System.out.println(evt.getMessage());
					}
					
					break;
				default:
					
					System.err.println("Received log message with unknown level: " + evt.getMessage() + " lvl: "
							+ evt.getLevel().toString());
					
					break;
				
			}
		}
	}
	
	/**
	 * @return the normalOn
	 */
	public boolean isNormalOn()
	{
		return normalOn;
	}
	
	/**
	 * @param normalOn
	 *            the normalOn to set
	 */
	public void setNormalOn(boolean normalOn)
	{
		this.normalOn = normalOn;
	}
	
	/**
	 * @return the errorOn
	 */
	public boolean isErrorOn()
	{
		return errorOn;
	}
	
	/**
	 * @param errorOn
	 *            the errorOn to set
	 */
	public void setErrorOn(boolean errorOn)
	{
		this.errorOn = errorOn;
	}
	
	/**
	 * @return the debugOn
	 */
	public boolean isDebugOn()
	{
		return debugOn;
	}
	
	/**
	 * @param debugOn
	 *            the debugOn to set
	 */
	public void setDebugOn(boolean debugOn)
	{
		this.debugOn = debugOn;
	}
	
}
